/***********************************************************************************************
 * Copyright (c) 2012  DCA-FEEC-UNICAMP
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the GNU Lesser Public License v3
 * which accompanies this distribution, and is available at
 * http://www.gnu.org/licenses/lgpl.html
 * <p>
 * Contributors:
 * K. Raizer, A. L. O. Paraense, E. M. Froes, R. R. Gudwin - initial API and implementation
 ***********************************************************************************************/
package br.unicamp.cst.sensory;
import br.unicamp.cst.core.entities.MemoryObject;
import br.unicamp.cst.core.entities.Mind;
import br.unicamp.cst.support.TimeStamp;
import java.util.List;
import java.util.concurrent.CopyOnWriteArrayList;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * Test for Codelet implementation of Top-Down Feature Maps generated by the 
 * Attentional System of Conscious Attention-Based Integrated Model (CONAIM).
 * 
  * @author L. L. Rossi (leolellisr)
 */
public class TopDownFeapMapCodeletTest {
    private static Logger log = LoggerFactory.getLogger(TopDownFeapMapCodeletTest.class);    
    public MemoryObject source;
    public MemoryObject destination;
    public TopDownFM testFeapMapCodelet;
    
    /**
     * Test class initialization for the Top-Down Feature Map. Creates a test 
     * mind, with 1 input and 1 output. The codelet to be tested is initialized as 
     * a TopDownFM and inserted into the created mind. 
     * Input and output are added to the codelet and it is set to 
     * publish-subscribe. The mind is then initiated.
     * 
     */
    
    public TopDownFeapMapCodeletTest() {
        Mind testMind = new Mind();
        source = testMind.createMemoryObject("SOURCE");
        destination = testMind.createMemoryObject("DESTINATION");
        destination.setI(new CopyOnWriteArrayList<Float>());
        CopyOnWriteArrayList<String> FMnames = new CopyOnWriteArrayList<>();
        FMnames.add("SOURCE");
        CopyOnWriteArrayList<Float> goal = new CopyOnWriteArrayList<>();
        goal.add((float) 255);
        goal.add((float) 0);
        goal.add((float) 0);
        testFeapMapCodelet = new TopDownFM(1, 0, FMnames, "DESTINATION", 100, 16, goal, 255, 16, 4, 3, false);
        testMind.insertCodelet(testFeapMapCodelet);
        testFeapMapCodelet.addInput(source);
        testFeapMapCodelet.addOutput(destination);
        testFeapMapCodelet.setIsMemoryObserver(true);
	source.addMemoryObserver(testFeapMapCodelet);
        testMind.start();        
    }
    
    @Test
    public void testTopDownFeapMapCodelet() {
        TopDownFeapMapCodeletTest test = new TopDownFeapMapCodeletTest();
            System.out.println("Testing ... ");
            
            // Test 1
            CopyOnWriteArrayList<Float> arrList_test = new CopyOnWriteArrayList<Float>();
            for (int i = 0; i < 256*3; i++) {
                arrList_test.add((float) 255);
            }
            CopyOnWriteArrayList<Float> arrList_goal = new CopyOnWriteArrayList<Float>();
            
            for (int i = 0; i < 16; i++) {
                arrList_goal.add((float) 0);
            }
            
            long oldtimestamp = test.destination.getTimestamp();
            System.out.println("steps"+test.testFeapMapCodelet.steps+" Timestamp before: "+TimeStamp.getStringTimeStamp(oldtimestamp, "dd/MM/yyyy HH:mm:ss.SSS"));
            long newtimestamp = test.destination.getTimestamp();
            test.testFeapMapCodelet.resetTriggers();
            System.out.println("steps: "+test.testFeapMapCodelet.steps+" Timestamp before: "+TimeStamp.getStringTimeStamp(oldtimestamp, "dd/MM/yyyy HH:mm:ss.SSS"));
            test.source.setI(arrList_test);
            System.out.println("steps: "+test.testFeapMapCodelet.steps+" Timestamp before: "+TimeStamp.getStringTimeStamp(oldtimestamp, "dd/MM/yyyy HH:mm:ss.SSS"));
            
            while(test.testFeapMapCodelet.steps < 1) {
                newtimestamp = test.destination.getTimestamp();
                System.out.println("steps: "+test.testFeapMapCodelet.steps+" Timestamp during: "+TimeStamp.getStringTimeStamp(newtimestamp,"dd/MM/yyyy HH:mm:ss.SSS"));
            }
            System.out.println("steps: "+test.testFeapMapCodelet.steps);        
            System.out.println("   Input 1: "+test.source.getI()+"  \n size: "+((List)(test.source.getI())).size());
            System.out.println("   Output 1: "+ test.destination.getI());
            System.out.println("   Goal 1:"+arrList_goal);
            System.out.println("steps: "+test.testFeapMapCodelet.steps);        
            List fulllist = (List) test.destination.getI();
            System.out.println("steps: "+test.testFeapMapCodelet.steps);        
            if (fulllist != null && fulllist.size() > 0) {
                System.out.println("          sizef: "+((List)(fulllist)).size()+"\n");
                assertEquals(fulllist.size(),16);
                assertEquals(fulllist,arrList_goal);
            }
            System.out.println("steps: "+test.testFeapMapCodelet.steps);     
            
            // Test 2
            oldtimestamp = test.destination.getTimestamp();
            System.out.println("steps: "+test.testFeapMapCodelet.steps+" Timestamp before: "+TimeStamp.getStringTimeStamp(oldtimestamp, "dd/MM/yyyy HH:mm:ss.SSS"));
            
            arrList_test = new CopyOnWriteArrayList<Float>();
            for (int i = 0; i < (int)(256/4); i++) {
                arrList_test.add((float) 0);
            }
            for (int i = (int)(256/4); i < (int)(256/4*2); i++) {
                arrList_test.add((float) 120);
            }
            for (int i = (int)(256/4*2); i < (int)(256/4*3); i++) {
                arrList_test.add((float) 200);
            }
            for (int i = (int)(256/4*3); i < 256*3; i++) {
                arrList_test.add((float) 255);
            }
            arrList_goal = new CopyOnWriteArrayList<Float>();
            for (int i = 0; i < 2; i++) {
                arrList_goal.add((float) 0.25);
            }
            for (int i = 0; i < 2; i++) {
                arrList_goal.add((float) 0.5);
            }
            for (int i = 0; i < 12; i++) {
                arrList_goal.add((float) 0.0);
            }
            
            System.out.println("steps: "+test.testFeapMapCodelet.steps);        
            newtimestamp = test.destination.getTimestamp();
            test.testFeapMapCodelet.resetTriggers();
            System.out.println("steps: "+test.testFeapMapCodelet.steps);        
            test.source.setI(arrList_test);
            System.out.println("steps: "+test.testFeapMapCodelet.steps);        
            while(test.testFeapMapCodelet.steps < 1) {
                newtimestamp = test.destination.getTimestamp();
                System.out.println("steps: "+test.testFeapMapCodelet.steps+" Timestamp after: "+TimeStamp.getStringTimeStamp(newtimestamp,"dd/MM/yyyy HH:mm:ss.SSS"));
            }
            System.out.println("steps: "+test.testFeapMapCodelet.steps);        
            System.out.println("   Input 2: "+test.source.getI()+" \n  size: "+((List)(test.source.getI())).size());
            System.out.print("\n   Output 2: "+ test.destination.getI());
            System.out.println("\n   Goal 2:"+arrList_goal);
            fulllist = (List) test.destination.getI();
            if (fulllist != null && fulllist.size() > 0) {
                System.out.println("          sizef: "+((List)(test.destination.getI())).size()+"\n");
                assertEquals(fulllist.size(),16);
                assertEquals(fulllist,arrList_goal);
            }
            
            oldtimestamp = test.destination.getTimestamp();
            System.out.println("steps: "+test.testFeapMapCodelet.steps+" Timestamp before: "+TimeStamp.getStringTimeStamp(oldtimestamp, "dd/MM/yyyy HH:mm:ss.SSS"));
            
            // Test 3
            arrList_test = new CopyOnWriteArrayList<Float>();
            for (int i = 0; i < (int)(256/4); i++) {
                arrList_test.add((float) 125);
            }
            for (int i = (int)(256/4); i < (int)(256/4*2); i++) {
                arrList_test.add((float) 100);
            }
            for (int i = (int)(256/4*2); i < (int)(256/4*3); i++) {
                arrList_test.add((float) 200);
            }
            for (int i = (int)(256/4*3); i < 256*3; i++) {
                arrList_test.add((float) 255);
            }
            arrList_goal = new CopyOnWriteArrayList<Float>();
            for (int i = 0; i < 3; i++) {
                arrList_goal.add((float) 0.5);
            }
            arrList_goal.add((float) 0.25);
            
            for (int i = 0; i < 12; i++) {
                arrList_goal.add((float) 0);
            }
            
            newtimestamp = test.destination.getTimestamp();
            test.testFeapMapCodelet.resetTriggers();
            test.source.setI(arrList_test);
            
            while(test.testFeapMapCodelet.steps < 1) {
                newtimestamp = test.destination.getTimestamp();
                System.out.println("steps: "+test.testFeapMapCodelet.steps+" Timestamp after: "+TimeStamp.getStringTimeStamp(newtimestamp,"dd/MM/yyyy HH:mm:ss.SSS"));
            }
            System.out.println("   Input 3: "+test.source.getI()+" \n  size: "+((List)(test.source.getI())).size());
            System.out.println("\n   Output 3: "+ test.destination.getI());
            System.out.println("\n   Goal 3:"+arrList_goal);
            fulllist = (List) test.destination.getI();
            if (fulllist != null && fulllist.size() > 0) {
                System.out.println("          sizef: "+((List)(test.destination.getI())).size()+"\n");
                assertEquals(fulllist.size(),16);
                assertEquals(fulllist,arrList_goal);
            }
    }
}
