/**
 * *****************************************************************************
 * Copyright (c) 2012  DCA-FEEC-UNICAMP
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the GNU Lesser Public License v3
 * which accompanies this distribution, and is available at
 * http://www.gnu.org/licenses/lgpl.html
 *
 * Contributors:
 *     K. Raizer, A. L. O. Paraense, R. R. Gudwin - initial API and implementation
 *****************************************************************************
 */
package br.unicamp.cst.sensory;

import br.unicamp.cst.core.entities.Codelet;
import br.unicamp.cst.core.entities.MemoryObject;
import java.util.ArrayList;
import java.util.List;

/**
 * Codelet implementation of Feature Maps generated by the Attentional System of 
 * Conscious Attention-Based Integrated Model (CONAIM). The maps, from a bottom-
 * up perspective, provide information that present saliences in the state to 
 * which attention should be oriented to and that, if attended, will enhance the
 * corresponding region in the attentional map for a certain time and inhibit
 * it in the sequence (inhibition of return). From a top-down perspective, 
 * depending on the system goal and on the attentional dynamic current state 
 * (orienting, selecting or sustaining), voluntary attention can be directed to
 * a region of space or object in two ways: by deliberative enhancing a region
 * in the attentional map or by adjusting the weights that define the 
 * contribution of each feature dimension.
 * 
 * @author L. M. Berto
 * @author L. L. Rossi (leolellisr)
 * @see Codelet
 * @see MemoryObject
 * @see SensorBufferCodelet
 */
public abstract class FeatMapCodelet extends Codelet{
    
    protected List sensor_buffers;
    protected ArrayList<String> sensorbuff_names;
    protected MemoryObject featureMap;
    protected String feat_map_name;
    protected double dt = 0.05;
    protected int num_sensors;
    protected int timeWindow;
    protected int mapDimension;
    protected MemoryObject winners;
    
    /**
     * init FeatMapCodelet
     * @param nsensors
     *          input SensorBuffers number 
     * @param sensbuff_names
     *          input SensorBuffers names
     * @param featmapname
     *          output feature map name
     * @param timeWin
     *          analyzed time window,  Buffer size
     * @param mapDim 
     *          output feature map dimension
     */
    public FeatMapCodelet(int nsensors, ArrayList<String> sensbuff_names, String featmapname,int timeWin, int mapDim){
        sensor_buffers = new ArrayList<MemoryObject>();
        num_sensors = nsensors;
        sensorbuff_names = sensbuff_names;
        feat_map_name = featmapname;
        timeWindow = timeWin;
        mapDimension = mapDim;
    }
    

    @Override
    /**
     * access MemoryObjects: SensorBuffers and Winners (for top-down perspective) 
     * define output: feat_map_name
     * 
     */
    public void accessMemoryObjects() {
        for (int i = 0; i < num_sensors; i++) {
            sensor_buffers.add((MemoryObject)this.getInput(sensorbuff_names.get(i)));
        }
        featureMap = (MemoryObject) this.getOutput(feat_map_name);
        winners = (MemoryObject) this.getInput("WINNERS");
        
    }    
}
