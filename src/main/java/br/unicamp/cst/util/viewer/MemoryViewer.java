/**
 * ********************************************************************************************
 * Copyright (c) 2012  DCA-FEEC-UNICAMP
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the GNU Lesser Public License v3
 * which accompanies this distribution, and is available at
 * http://www.gnu.org/licenses/lgpl.html
 * <p>
 * Contributors:
 * K. Raizer, A. L. O. Paraense, E. M. Froes, R. R. Gudwin - initial API and implementation
 * *********************************************************************************************
 */
package br.unicamp.cst.util.viewer;

import br.unicamp.cst.core.entities.Memory;
import br.unicamp.cst.core.entities.MemoryObject;
import br.unicamp.cst.util.TimeStamp;
import java.lang.reflect.Field;
import java.util.ArrayList;
import java.util.List;
import java.util.Timer;
import java.util.TimerTask;
import javax.swing.ImageIcon;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author rgudwin
 */
public class MemoryViewer extends javax.swing.JFrame {

    Memory m;
    Object o;
    DefaultTableModel nTableModel = new DefaultTableModel();
    ImageIcon pause_icon = new ImageIcon(getClass().getResource("/pause-icon.png")); 
    ImageIcon play_icon = new ImageIcon(getClass().getResource("/play-icon.png"));
    MemoryViewer.MVTimerTask tt;
    boolean capture=false;
    /**
     * Creates new form MemoryViewer
     */
    public MemoryViewer() {
        initComponents();
    }
    
    public MemoryViewer(Memory mem) {
        this();
        m = mem;
        setTitle(m.getName());
        StartTimer();
    }
    
    public void StartTimer() {
        Timer t = new Timer();
        tt = new MemoryViewer.MVTimerTask(this);
        t.scheduleAtFixedRate(tt, 0, 100);
    }

    void tick() {
        if (m != null) {
            o = m.getI();
            if (o != null) {
                if (capture == true) {
                    set_enable(false);
                    capture = false;
                }
                if (o instanceof float[]) {
                    Object[] columnNames = { "Field", "Value" };
                    DefaultTableModel tm = new DefaultTableModel(columnNames,0);
                    Object[] row = new Object[2];
                    float fo[] = (float[]) o;
                    for (int i=0;i< fo.length;i++) {
                        row[0] = "["+i+"]";
                        row[1] = String.format("%4.2f", fo[i]);
                        tm.insertRow(tm.getRowCount(), row);                        
                    }
                    mValues.setModel(tm);
                }
                else if (o instanceof Object) {
                    //DefaultTableModel tm = ((DefaultTableModel) mValues.getModel()).clone();
                    Object[] columnNames = { "Field", "Value" };
                    DefaultTableModel tm = new DefaultTableModel(columnNames,0);
                    Field[] fields = o.getClass().getDeclaredFields();
                    Object[] row = new Object[2];
                    for (Field field : fields) {
                        row[0] = field.getName();
                        if (!field.isAccessible()) field.setAccessible(true);
                        try {
                            row[1] = field.get(o);
                        } catch (Exception e) {e.printStackTrace();}  
                        tm.insertRow(tm.getRowCount(), row);
                    }
                    mValues.setModel(tm);
               }
                
            }
            else {// this is what to show when the memory is null
                mValues.setModel(nTableModel);
            }
            long times = ((MemoryObject) m).getTimestamp();
            String ts = TimeStamp.getStringTimeStamp(times,"dd/MM/yyyy HH:mm:ss.SSS");
            timeStamp.setText(ts);
            Eval.setText(String.format("%4.2f",m.getEvaluation()));
        }
    }
    
    public List<String> getInfoFromObject(Object o) {
        Field[] fields = o.getClass().getDeclaredFields();
        List<String> actualFieldNames = getFieldNames(fields);
        return(actualFieldNames);
    }
    
    private List<String> getFieldNames(Field[] fields) {
        List<String> fieldNames = new ArrayList<>();
        for (Field field : fields)
            fieldNames.add(field.getName());
        return fieldNames;
    }
    
    class MVTimerTask extends TimerTask {

        MemoryViewer mv;
        boolean enabled = true;

        public MVTimerTask(MemoryViewer wovi) {
            mv = wovi;
        }

        public void run() {
            if (enabled) {
                mv.tick();
            }
        }

        public void setEnabled(boolean value) {
            enabled = value;
        }
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        mValues = new javax.swing.JTable();
        timeStamp = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        Eval = new javax.swing.JLabel();
        bPause = new javax.swing.JButton();
        bStop = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jLabel1.setText("TimeStamp:");

        mValues.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null}
            },
            new String [] {
                "Field", "Value"
            }
        ));
        jScrollPane2.setViewportView(mValues);

        timeStamp.setText(" ");

        jLabel3.setText("Eval:");

        Eval.setText(" ");

        bPause.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pause-icon.png"))); // NOI18N
        bPause.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bPauseActionPerformed(evt);
            }
        });

        bStop.setIcon(new javax.swing.ImageIcon(getClass().getResource("/stop-playing-icon.png"))); // NOI18N
        bStop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bStopActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(bPause, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(2, 2, 2)
                .addComponent(bStop, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(6, 6, 6)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(timeStamp, javax.swing.GroupLayout.PREFERRED_SIZE, 226, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Eval, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(109, Short.MAX_VALUE))
            .addComponent(jScrollPane2)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(bPause, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(2, 2, 2)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(timeStamp)
                            .addComponent(jLabel3)
                            .addComponent(Eval)))
                    .addComponent(bStop, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 288, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public void set_enable(boolean state) {
        if (state == true) bPause.setIcon(pause_icon); 
        else bPause.setIcon(play_icon); 
        tt.enabled = state; 
    }   
    
    private void bPauseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bPauseActionPerformed
        if (tt.enabled == true) set_enable(false);
        else set_enable(true);
    }//GEN-LAST:event_bPauseActionPerformed

    private void bStopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bStopActionPerformed
        capture = true;
    }//GEN-LAST:event_bStopActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel Eval;
    private javax.swing.JButton bPause;
    private javax.swing.JButton bStop;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable mValues;
    private javax.swing.JLabel timeStamp;
    // End of variables declaration//GEN-END:variables
}
