/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package br.unicamp.cst.util;

import br.unicamp.cst.core.entities.Codelet;
import br.unicamp.cst.core.entities.Memory;
import br.unicamp.cst.core.entities.MemoryContainer;
import br.unicamp.cst.core.entities.MemoryObject;
import br.unicamp.cst.core.entities.Mind;
import br.unicamp.cst.core.entities.TestCodelet;
import java.awt.BorderLayout;
import java.awt.Color;
import java.util.ArrayList;
import java.util.List;
import java.util.Timer;
import java.util.TimerTask;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFormattedTextField;
import javax.swing.JScrollPane;
import javax.swing.JTree;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;
import javax.swing.tree.TreeModel;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.data.category.DefaultCategoryDataset;

/**
 *
 * @author gudwin
 */
public class MindViewer extends javax.swing.JFrame {

    private String windowName;
    private JTree jtree;
    Mind wog;
    
    private List<Codelet> motivationalCodelets;
    private List<Codelet> emotionalCodelets;
    private List<Codelet> goalCodelets;
    private List<Codelet> appraisalCodelets;
    private List<Codelet> moodCodelets;

    private Thread threadDrives;
    private Thread threadEmotionalDrives;
    private Thread threadMindEntities;

    
    private boolean bStopRefresh = false;
    
    /**
     * Creates new form WorldObjectViewer
     */
    public MindViewer(Mind mind, String windowName) {
        initComponents();
        /*TreeModel tm = createTreeModel(new Mind());
        jtree = new JTree(tm);
        expandAllNodes(jtree);
        jspMindsEntities.setViewportView(jtree);
        jtree.setCellRenderer(new RendererJTree());*/
        setWO(mind);

        setWindowName(windowName);

        createTreeModelGUI(jspMindsEntities, wog.getCodeRack().getAllCodelets(), windowName);
        setTitle(windowName);
        startMindEntitiesThread();
        //StartTimer();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jspMindViewer = new javax.swing.JSplitPane();
        jtpMindsEntities = new javax.swing.JTabbedPane();
        jspMindsEntities = new javax.swing.JScrollPane();
        tbMotivationalSubsystem = new javax.swing.JTabbedPane();
        splDrives = new javax.swing.JSplitPane();
        spMotivationalCodelets = new javax.swing.JScrollPane();
        pnDrives = new javax.swing.JPanel();
        splEmotional = new javax.swing.JSplitPane();
        spEmotionalCodelets = new javax.swing.JScrollPane();
        pnEmotional = new javax.swing.JPanel();
        spMoodCodelets = new javax.swing.JScrollPane();
        spAppraisalCodelets = new javax.swing.JScrollPane();
        spGoalCodelets = new javax.swing.JScrollPane();
        jPanel1 = new javax.swing.JPanel();
        lblRefreshTime = new javax.swing.JLabel();
        txtRefreshTime = new javax.swing.JFormattedTextField();
        jcbRefresh = new javax.swing.JCheckBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jspMindViewer.setDividerLocation(300);

        jtpMindsEntities.addTab("Minds' Entities", jspMindsEntities);

        jspMindViewer.setLeftComponent(jtpMindsEntities);

        splDrives.setDividerLocation(150);
        splDrives.setLeftComponent(spMotivationalCodelets);

        javax.swing.GroupLayout pnDrivesLayout = new javax.swing.GroupLayout(pnDrives);
        pnDrives.setLayout(pnDrivesLayout);
        pnDrivesLayout.setHorizontalGroup(
            pnDrivesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        pnDrivesLayout.setVerticalGroup(
            pnDrivesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 588, Short.MAX_VALUE)
        );

        splDrives.setRightComponent(pnDrives);

        tbMotivationalSubsystem.addTab("Drives", splDrives);

        splEmotional.setDividerLocation(300);
        splEmotional.setLeftComponent(spEmotionalCodelets);

        javax.swing.GroupLayout pnEmotionalLayout = new javax.swing.GroupLayout(pnEmotional);
        pnEmotional.setLayout(pnEmotionalLayout);
        pnEmotionalLayout.setHorizontalGroup(
            pnEmotionalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        pnEmotionalLayout.setVerticalGroup(
            pnEmotionalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 588, Short.MAX_VALUE)
        );

        splEmotional.setRightComponent(pnEmotional);

        tbMotivationalSubsystem.addTab("Emotional Drives", splEmotional);
        tbMotivationalSubsystem.addTab("Moods", spMoodCodelets);
        tbMotivationalSubsystem.addTab("Appraisals", spAppraisalCodelets);
        tbMotivationalSubsystem.addTab("Goals", spGoalCodelets);

        jspMindViewer.setRightComponent(tbMotivationalSubsystem);

        lblRefreshTime.setText("Refresh Time (ms):");

        txtRefreshTime.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0"))));
        txtRefreshTime.setText("500");
        txtRefreshTime.setToolTipText("");

        jcbRefresh.setText("Automatic Refresh");
        jcbRefresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jcbRefreshActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblRefreshTime)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtRefreshTime, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jcbRefresh)
                .addContainerGap(316, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblRefreshTime)
                    .addComponent(txtRefreshTime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jcbRefresh))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jspMindViewer, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 761, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jspMindViewer, javax.swing.GroupLayout.DEFAULT_SIZE, 642, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jcbRefreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jcbRefreshActionPerformed
        // TODO add your handling code here:
        if(jcbRefresh.isSelected())
        {
            if(threadDrives != null) {
                synchronized (threadDrives) {
                    threadDrives.notify();
                }
            }

            if(threadEmotionalDrives != null) {
                synchronized (threadEmotionalDrives) {
                    threadEmotionalDrives.notify();
                }
            }

            if(threadMindEntities != null) {
                synchronized (threadMindEntities) {
                    threadMindEntities.notify();
                }
            }
            
            txtRefreshTime.setEnabled(false);
        }
        else{
            txtRefreshTime.setEnabled(true);
        }
    }//GEN-LAST:event_jcbRefreshActionPerformed

    
    public void initMotivationalSubsystemViewer(List<Codelet> motivationalCodelets,
                                       List<Codelet> emotionalCodelets,
                                       List<Codelet> goalCodelets,
                                       List<Codelet> appraisalCodelets,
                                       List<Codelet> moodCodelets){
        setMotivationalCodelets(motivationalCodelets);
        setEmotionalCodelets(emotionalCodelets);
        setGoalCodelets(goalCodelets);
        setAppraisalCodelets(appraisalCodelets);
        setMoodCodelets(moodCodelets);

        createTreeModelGUI(spMotivationalCodelets, motivationalCodelets, "Motivational Codelets");
        createTreeModelGUI(spGoalCodelets, goalCodelets, "Goal Codelets");
        createTreeModelGUI(spAppraisalCodelets, appraisalCodelets, "Appraisal Codelets");
        createTreeModelGUI(spMoodCodelets, moodCodelets, "Mood Codelets");
        createTreeModelGUI(spEmotionalCodelets, emotionalCodelets, "Emotional Codelets");

        startMotivationalThreads();
    }
    
    private DefaultTreeModel createTreeModelGUI(JScrollPane scrollPane, List<Codelet> codelets, String title) {
        DefaultTreeModel treeCodelets = createTreeModel(codelets, title, TreeElement.ICON_CODELETS);

        JTree jtTree = new JTree(treeCodelets);
        expandAllNodes(jtTree);
        scrollPane.setViewportView(jtTree);
        jtTree.setCellRenderer(new RendererJTree());

        return treeCodelets;
    }
    
    private void startMindEntitiesThread(){
         setThreadMindEntities(new Thread() {
            @Override
            public void run() {
                while (!isbStopRefresh()) {
                    
                    if(!jcbRefresh.isSelected()){
                        try {
                            synchronized (threadMindEntities) {
                                threadMindEntities.wait();
                            }
                        } catch (InterruptedException ex) {
                            Logger.getLogger(MindViewer.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    }

                    createTreeModelGUI(jspMindsEntities, wog.getCodeRack().getAllCodelets(), getWindowName());

                    try {
                        int refreshTime = txtRefreshTime.getText().trim().equals("") ? 100 : Integer.parseInt(txtRefreshTime.getText());
                        Thread.currentThread().sleep(refreshTime);
                    } catch (InterruptedException e) {
                        e.printStackTrace();
                    }
                }
            }
        });

        getThreadMindEntities().start();
    }
    
    private void startMotivationalThreads() {
        setThreadDrives(new Thread() {
            @Override
            public void run() {
                DefaultCategoryDataset dataset = new DefaultCategoryDataset();
                synchronized (pnDrives) {
                    pnDrives.setLayout(new BorderLayout());
                    pnDrives.add(createChart(dataset, "Motivational Codelets", "Drives", "Activation", PlotOrientation.VERTICAL), BorderLayout.CENTER);
                    pnDrives.validate();
                }
                while (!isbStopRefresh()) {
                    while (tbMotivationalSubsystem.getSelectedIndex() != 0 && !isbStopRefresh());
                    
                    if(!jcbRefresh.isSelected()){
                        try {
                            synchronized (threadDrives) {
                                threadDrives.wait();
                            }
                        } catch (InterruptedException ex) {
                            Logger.getLogger(MindViewer.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    }

                    createTreeModelGUI(spMotivationalCodelets, motivationalCodelets, "Motivational Codelets");
                    updateValuesInChart(dataset, motivationalCodelets);
                    try {
                        int refreshTime = txtRefreshTime.getText().trim().equals("") ? 100 : Integer.parseInt(txtRefreshTime.getText());
                        Thread.currentThread().sleep(refreshTime);
                    } catch (InterruptedException e) {
                        e.printStackTrace();
                    }
                }
            }
        });

        setThreadEmotionalDrives(new Thread() {
            @Override
            public void run() {
                DefaultCategoryDataset dataset = new DefaultCategoryDataset();
                synchronized (pnEmotional) {
                    pnEmotional.setLayout(new BorderLayout());
                    pnEmotional.add(createChart(dataset, "Emotional Codelets", "Emotional Drives", "Activation", PlotOrientation.VERTICAL), BorderLayout.CENTER);
                    pnEmotional.validate();
                }
                while (!isbStopRefresh()) {
                    while (tbMotivationalSubsystem.getSelectedIndex() != 1 && !isbStopRefresh());
                    
                    if(!jcbRefresh.isSelected()){
                        try {
                            synchronized (threadEmotionalDrives) {
                                threadEmotionalDrives.wait();
                            }
                        } catch (InterruptedException ex) {
                            Logger.getLogger(MindViewer.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    }

                    createTreeModelGUI(spEmotionalCodelets, emotionalCodelets, "Emotional Codelets");
                    updateValuesInChart(dataset, emotionalCodelets);
                    try {
                        int refreshTime = txtRefreshTime.getText().trim().equals("") ? 100 : Integer.parseInt(txtRefreshTime.getText());
                        Thread.currentThread().sleep(refreshTime);
                    } catch (InterruptedException e) {
                        e.printStackTrace();
                    }
                }
            }
        });

        getThreadEmotionalDrives().start();
        getThreadDrives().start();
    }
    
    private synchronized ChartPanel createChart(DefaultCategoryDataset dataset, String title, String categoryAxisLabel, String valueAxisLabel, PlotOrientation chartType) {

        final JFreeChart chart = ChartFactory.createBarChart(
                title,
                categoryAxisLabel,
                valueAxisLabel,
                dataset,
                chartType,
                true,
                true,
                false
        );

        final CategoryPlot plot = chart.getCategoryPlot();
        plot.setBackgroundPaint(Color.lightGray);
        plot.setDomainGridlinePaint(Color.white);
        plot.setRangeGridlinePaint(Color.white);
        chart.setBackgroundPaint(Color.lightGray);

        ChartPanel localChartPanel = new ChartPanel(chart);
        localChartPanel.setVisible(true);
        localChartPanel.setDomainZoomable(true);

        return localChartPanel;
    }
    
    private synchronized void updateValuesInChart(DefaultCategoryDataset dataset, List<Codelet> codelets) {
        ArrayList<Codelet> tempCodeletsList = new ArrayList<Codelet>();
        tempCodeletsList.addAll(codelets);

        synchronized (tempCodeletsList) {
            for (Codelet co : tempCodeletsList) {
                dataset.addValue(co.getActivation(), co.getName(), "activation");
            }
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MindViewer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MindViewer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MindViewer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MindViewer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        Mind m = new Mind();
        MemoryObject m1 = m.createMemoryObject("M1",0.12);
        MemoryObject m2 = m.createMemoryObject("M2",0.32);
        MemoryObject m3 = m.createMemoryObject("M3",0.44);
        MemoryObject m4 = m.createMemoryObject("M4",0.52);
        MemoryObject m5 = m.createMemoryObject("M5",0.12);
        MemoryContainer m6 = m.createMemoryContainer("C1");
        MemoryContainer m7 = m.createMemoryContainer("C2");
        m7.setI(0.55,0.23);
        m6.setI(0.33,0.22);
        m6.setI(0.12,0.13);
        m6.setI(m7);
        Codelet c = new TestCodelet("Codelet 1");
        c.addInput(m1);
        c.addInput(m2);
        c.addOutput(m3);
        c.addOutput(m4);
        c.addBroadcast(m5);
        m.insertCodelet(c);
        Codelet c2 = new TestCodelet("Codelet 2");
        c2.addInput(m4);
        c2.addInput(m5);
        c2.addOutput(m6);
        c2.addOutput(m3);
        c2.addBroadcast(m5);
        m.insertCodelet(c2);
        MindViewer ov = new MindViewer(m, "Mind");
        ov.setVisible(true);
        System.out.println("Teste:");
       // ov.updateTree(m);
    }
  
    public void setWO(Mind newwog) {
        wog = newwog;
    }
    
    private DefaultMutableTreeNode addRootNode(String rootNodeName) {
        DefaultMutableTreeNode root = new DefaultMutableTreeNode(new TreeElement(rootNodeName, TreeElement.NODE_NORMAL, null, TreeElement.ICON_CONFIGURATION));
        return(root);
    }
    
    private DefaultMutableTreeNode addMind(Mind m) {
        
        DefaultMutableTreeNode mindNode = addItem("Mind",TreeElement.ICON_MIND);
        DefaultMutableTreeNode codeletsNode = addItem("Codelets",TreeElement.ICON_CODELETS);
        mindNode.add(codeletsNode);
        List<Codelet> codelets = m.getCodeRack().getAllCodelets();
        for (Codelet oo : codelets) {
            DefaultMutableTreeNode newcodeletNode = addCodelet(oo);
            codeletsNode.add(newcodeletNode);
        }
        DefaultMutableTreeNode memoriesNode = addItem("Memories",TreeElement.ICON_MEMORIES);
        mindNode.add(memoriesNode);
        List<Memory> memories = m.getRawMemory().getAllMemoryObjects();
        for (Memory mo : memories) {
                DefaultMutableTreeNode memoryNode = addMemory(mo);
                memoriesNode.add(memoryNode);
            }
        
        return(mindNode);    
    }
    
    private DefaultMutableTreeNode addIO(Memory m, int icon) {
            String value = m.getName()+" : ";
            Object mval = m.getI();
            if (mval != null) value += mval.toString();
            else value += null;
            DefaultMutableTreeNode memoryNode = addItem(value,icon);
            return(memoryNode);
    }
    
    private DefaultMutableTreeNode addCodelet(Codelet p) {
        DefaultMutableTreeNode codeletNode = addItem(p.getName(), TreeElement.ICON_CODELET);
        List<Memory> inputs = p.getInputs();
        List<Memory> outputs = p.getOutputs();
        List<Memory> broadcasts = p.getBroadcast();
        for (Memory i : inputs) {
            DefaultMutableTreeNode memoryNode = addIO(i,TreeElement.ICON_INPUT);
            codeletNode.add(memoryNode);
        }
        for (Memory o : outputs) {
            DefaultMutableTreeNode memoryNode = addIO(o,TreeElement.ICON_OUTPUT);
            codeletNode.add(memoryNode);
        }
        for (Memory b : broadcasts) {
            DefaultMutableTreeNode memoryNode = addIO(b,TreeElement.ICON_BROADCAST);
            codeletNode.add(memoryNode);
        }
        return(codeletNode);
    }
    
    private DefaultMutableTreeNode addItem(String p, int icon_type) {
        Object o = new TreeElement(p, TreeElement.NODE_NORMAL, p, icon_type);
        DefaultMutableTreeNode memoryNode = new DefaultMutableTreeNode(o);
        return(memoryNode);
    }
      
    private DefaultMutableTreeNode addMemory(Memory p) {
        String name = p.getName();
        DefaultMutableTreeNode memoryNode = addItem(name,TreeElement.ICON_MEMORIES);
        if (p.getClass().getCanonicalName().equals("br.unicamp.cst.core.entities.MemoryObject")) {
            String value = "";
            Object pval = p.getI();
            if (pval != null) value += pval.toString();
            else value += "null";
            memoryNode = addItem(name+" : "+value,TreeElement.ICON_MO);
        }
        else if (p.getClass().getCanonicalName().equals("br.unicamp.cst.core.entities.MemoryContainer")) {
            String value = "";
            Object pval = p.getI();
            if (pval != null) value += pval.toString();
            else value += "null";
            memoryNode = addItem(name+" : "+value,TreeElement.ICON_CONTAINER);
            MemoryContainer mc = (MemoryContainer)p;
            for (Memory mo : mc.getAllMemories()) {
                DefaultMutableTreeNode newmemo = addMemory(mo);
                memoryNode.add(newmemo);
            }            
        }
        return(memoryNode);
    }
    
    public TreeModel createTreeModel(Mind m) {
        DefaultMutableTreeNode o = addMind(m);
        TreeModel tm = new DefaultTreeModel(o);
        return(tm);
    }
    
    private DefaultTreeModel createTreeModel(List<Codelet> codelts, String title, int icon) {
        DefaultMutableTreeNode dmtCodelets = addItem(title, icon);

        for (Codelet codelet : codelts) {
            DefaultMutableTreeNode dmtCodelet = addCodelet(codelet);
            dmtCodelets.add(dmtCodelet);
        }

        DefaultTreeModel tm = new DefaultTreeModel(dmtCodelets);
        return tm;
    }    
//    private JTree addNodeJTree(WorldObject wo) {
//        JTree tree;
//        TreeModel tm = createTreeModel(wo);
//        tree = new JTree(tm);
//        expandAllNodes(tree);
//        return tree;
//    }
    
    private void expandAllNodes(JTree tree) {
         expandAllNodes(tree, 0, tree.getRowCount());
    }
    
    private void expandAllNodes(JTree tree, int startingIndex, int rowCount){
       for(int i=startingIndex;i<rowCount;++i){
          tree.expandRow(i);
       }
       if(tree.getRowCount()!=rowCount){
          expandAllNodes(tree, rowCount, tree.getRowCount());
       }
    }
    
    public void updateTree(Mind m) {
       wog = m; 
       TreeModel tm = createTreeModel(m);
       jtree.setModel(tm);
       expandAllNodes(jtree);
    }
    
    public void StartTimer() {
        Timer t = new Timer();
        WOVTimerTask tt = new WOVTimerTask(this);
        t.scheduleAtFixedRate(tt,0,3000);
    }
    
    public void tick() {
        if (wog != null) updateTree(wog);
        else System.out.println("Mind � null");
        System.out.println("update");
    }

    public String getWindowName() {
        return windowName;
    }

    public void setWindowName(String windowName) {
        this.windowName = windowName;
    }

    class WOVTimerTask extends TimerTask {
    MindViewer wov;
    boolean enabled = true;
    
    public WOVTimerTask(MindViewer wovi) {
        wov = wovi;
    }
    
    public void run() {
        if (enabled) wov.tick();
    }
    
    public void setEnabled(boolean value) {
        enabled = value;
    }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JCheckBox jcbRefresh;
    private javax.swing.JSplitPane jspMindViewer;
    private javax.swing.JScrollPane jspMindsEntities;
    private javax.swing.JTabbedPane jtpMindsEntities;
    private javax.swing.JLabel lblRefreshTime;
    private javax.swing.JPanel pnDrives;
    private javax.swing.JPanel pnEmotional;
    private javax.swing.JScrollPane spAppraisalCodelets;
    private javax.swing.JScrollPane spEmotionalCodelets;
    private javax.swing.JScrollPane spGoalCodelets;
    private javax.swing.JScrollPane spMoodCodelets;
    private javax.swing.JScrollPane spMotivationalCodelets;
    private javax.swing.JSplitPane splDrives;
    private javax.swing.JSplitPane splEmotional;
    private javax.swing.JTabbedPane tbMotivationalSubsystem;
    private javax.swing.JFormattedTextField txtRefreshTime;
    // End of variables declaration//GEN-END:variables

    /**
     * @return the motivationalCodelets
     */
    public List<Codelet> getMotivationalCodelets() {
        return motivationalCodelets;
    }

    /**
     * @param motivationalCodelets the motivationalCodelets to set
     */
    public void setMotivationalCodelets(List<Codelet> motivationalCodelets) {
        this.motivationalCodelets = motivationalCodelets;
    }

    /**
     * @return the emotionalCodelets
     */
    public List<Codelet> getEmotionalCodelets() {
        return emotionalCodelets;
    }

    /**
     * @param emotionalCodelets the emotionalCodelets to set
     */
    public void setEmotionalCodelets(List<Codelet> emotionalCodelets) {
        this.emotionalCodelets = emotionalCodelets;
    }

    /**
     * @return the goalCodelets
     */
    public List<Codelet> getGoalCodelets() {
        return goalCodelets;
    }

    /**
     * @param goalCodelets the goalCodelets to set
     */
    public void setGoalCodelets(List<Codelet> goalCodelets) {
        this.goalCodelets = goalCodelets;
    }

    /**
     * @return the appraisalCodelets
     */
    public List<Codelet> getAppraisalCodelets() {
        return appraisalCodelets;
    }

    /**
     * @param appraisalCodelets the appraisalCodelets to set
     */
    public void setAppraisalCodelets(List<Codelet> appraisalCodelets) {
        this.appraisalCodelets = appraisalCodelets;
    }

    /**
     * @return the moodCodelets
     */
    public List<Codelet> getMoodCodelets() {
        return moodCodelets;
    }

    /**
     * @param moodCodelets the moodCodelets to set
     */
    public void setMoodCodelets(List<Codelet> moodCodelets) {
        this.moodCodelets = moodCodelets;
    }

    /**
     * @return the threadDrives
     */
    public Thread getThreadDrives() {
        return threadDrives;
    }

    /**
     * @param threadDrives the threadDrives to set
     */
    public void setThreadDrives(Thread threadDrives) {
        this.threadDrives = threadDrives;
    }

    /**
     * @return the threadEmotionalDrives
     */
    public Thread getThreadEmotionalDrives() {
        return threadEmotionalDrives;
    }

    /**
     * @param threadEmotionalDrives the threadEmotionalDrives to set
     */
    public void setThreadEmotionalDrives(Thread threadEmotionalDrives) {
        this.threadEmotionalDrives = threadEmotionalDrives;
    }

    /**
     * @return the bStopRefresh
     */
    public boolean isbStopRefresh() {
        return bStopRefresh;
    }

    /**
     * @param bStopRefresh the bStopRefresh to set
     */
    public void setbStopRefresh(boolean bStopRefresh) {
        this.bStopRefresh = bStopRefresh;
    }

    /**
     * @return the threadMindEntities
     */
    public Thread getThreadMindEntities() {
        return threadMindEntities;
    }

    /**
     * @param threadMindEntities the threadMindEntities to set
     */
    public void setThreadMindEntities(Thread threadMindEntities) {
        this.threadMindEntities = threadMindEntities;
    }
}
