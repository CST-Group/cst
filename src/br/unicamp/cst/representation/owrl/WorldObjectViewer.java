/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package br.unicamp.cst.representation.owrl;

import br.unicamp.cst.core.entities.Codelet;
import br.unicamp.cst.core.entities.MemoryObject;
import java.util.List;
import java.util.Timer;
import java.util.TimerTask;
import javax.swing.JScrollPane;
import javax.swing.JTree;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;
import javax.swing.tree.TreeModel;

/**
 *
 * @author gudwin
 */
public class WorldObjectViewer extends javax.swing.JFrame {
    
    private JTree jtree;
    WorldObject wog;

    /**
     * Creates new form WorldObjectViewer
     */
    public WorldObjectViewer(String windowName) {
        initComponents();
        TreeModel tm = createTreeModel(new WorldObject("Empty"));
        jtree = new JTree(tm);
        expandAllNodes(jtree);
        jsp.setViewportView(jtree);
        jtree.setCellRenderer(new RendererJTree());
        setTitle(windowName);
        StartTimer();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jsp = new javax.swing.JScrollPane();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jsp, javax.swing.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jsp, javax.swing.GroupLayout.DEFAULT_SIZE, 413, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(WorldObjectViewer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(WorldObjectViewer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(WorldObjectViewer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(WorldObjectViewer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        WorldObject wo = new WorldObject("Teste");
        WorldObject so1 = new WorldObject("Sub-objeto1");
        so1.addProperty(new Property("Property2",new QualityDimension("Quality Dimension2","Value2")));
        wo.addPart(so1);
        WorldObject so2 = new WorldObject("Sub-objeto2");
        so2.addProperty(new Property("Property3",new QualityDimension("Quality Dimension3","Value3")));
        wo.addPart(so2);
        wo.addProperty(new Property("Property",new QualityDimension("Quality Dimension","Value")));   
        WorldObjectViewer ov = new WorldObjectViewer("Teste");
        ov.setVisible(true);
        System.out.println("Teste:");
        ov.updateTree(wo);
    }
  
    public void setWO(WorldObject newwog) {
        wog = newwog;
    }
    
    private DefaultMutableTreeNode addRootNode(String rootNodeName) {
        DefaultMutableTreeNode root = new DefaultMutableTreeNode(new TreeElement(rootNodeName, TreeElement.NODE_NORMAL, null, TreeElement.ICON_CONFIGURATION));
        return(root);
    }
    
    private DefaultMutableTreeNode addObject(WorldObject wo) {
        DefaultMutableTreeNode objectNode = new DefaultMutableTreeNode(new TreeElement(wo.getName() + " [" + wo.getID()+"]", TreeElement.NODE_NORMAL, wo, TreeElement.ICON_OBJECT));
        List<WorldObject> parts = wo.getParts();
        for (WorldObject oo : parts) {
            DefaultMutableTreeNode part = addObject(oo);
            objectNode.add(part);
        }
        List<Property> props = wo.getProperties();
        for (Property p : props) {
                DefaultMutableTreeNode propertyNode = addProperty(p);
                objectNode.add(propertyNode);
            }
        
        return(objectNode);    
    }
    
    private DefaultMutableTreeNode addProperty(Property p) {
        DefaultMutableTreeNode propertyNode = new DefaultMutableTreeNode(new TreeElement(p.getName(), TreeElement.NODE_NORMAL, p, TreeElement.ICON_PROPERTY));
        int size = ((Property) p).getQualityDimensions().size();
        for (int s = 0; s < size; s++) {
            String chave = ((Property) p).getQualityDimensions().get(s).getName();
            String value = (((Property) p).getQualityDimensions().get(s).getValue()).toString();
            DefaultMutableTreeNode qualityDimensionNode = new DefaultMutableTreeNode(new TreeElement(chave, TreeElement.NODE_NORMAL, chave, TreeElement.ICON_QUALITYDIM));
            propertyNode.add(qualityDimensionNode);
            DefaultMutableTreeNode valueQualityDimensionNode = new DefaultMutableTreeNode(new TreeElement(value, TreeElement.NODE_NORMAL, value, TreeElement.ICON_VALUE));
            qualityDimensionNode.add(valueQualityDimensionNode);

        }
        return(propertyNode);
    }
    
    public TreeModel createTreeModel(WorldObject wo) {
        DefaultMutableTreeNode o = addObject(wo);
        TreeModel tm = new DefaultTreeModel(o);
        return(tm);
    }
    
//    private JTree addNodeJTree(WorldObject wo) {
//        JTree tree;
//        TreeModel tm = createTreeModel(wo);
//        tree = new JTree(tm);
//        expandAllNodes(tree);
//        return tree;
//    }
    
    private void expandAllNodes(JTree tree) {
         expandAllNodes(tree, 0, tree.getRowCount());
    }
    
    private void expandAllNodes(JTree tree, int startingIndex, int rowCount){
       for(int i=startingIndex;i<rowCount;++i){
          tree.expandRow(i);
       }
       if(tree.getRowCount()!=rowCount){
          expandAllNodes(tree, rowCount, tree.getRowCount());
       }
    }
    
    public void updateTree(WorldObject wo) {
       TreeModel tm = createTreeModel(wo);
       jtree.setModel(tm);
       expandAllNodes(jtree);
    }
    
     public void StartTimer() {
        Timer t = new Timer();
        WOVTimerTask tt = new WOVTimerTask(this);
        t.scheduleAtFixedRate(tt,0,10000);
    }
    
    public void tick() {
        if (wog != null) updateTree(wog);
    }

    class WOVTimerTask extends TimerTask {
    WorldObjectViewer wov;
    boolean enabled = true;
    
    public WOVTimerTask(WorldObjectViewer wovi) {
        wov = wovi;
    }
    
    public void run() {
        if (enabled) wov.tick();
    }
    
    public void setEnabled(boolean value) {
        enabled = value;
    }
}
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jsp;
    // End of variables declaration//GEN-END:variables
}
